// NXC Sample Program for DIST-Nx
// READ THIS:
// Make sure you initialize the sensor using the correct type and properly energize
// it after you configure the port as a lowspeed port.  The sample program is setup
// to have the sensor attached to port 1.

// Device Address
#define DIST_ADDR 0x02

// DIST-Nx Commands
#define DIST_CMD_GP2D12      0x31
#define DIST_CMD_GP2D120     0x32
#define DIST_CMD_GP2YA21     0x33
#define DIST_CMD_GP2YA02     0x34
#define DIST_CMD_CUSTOM      0x35
#define DIST_CMD_ENERGIZED   0x45
#define DIST_CMD_DEENERGIZED 0x44
#define DIST_CMD_ADPA_ON     0x4E
#define DIST_CMD_ADPA_OFF    0x4F

// DIST-Nx Registers
#define DIST_REG_VERSION       0x00
#define DIST_REG_VENDORID      0x08
#define DIST_REG_DEVICEID      0x10
#define DIST_REG_CMD           0x41
#define DIST_REG_DIST_LSB      0x42
#define DIST_REG_DIST_MSB      0x43
#define DIST_REG_VOLT_LSB      0x44
#define DIST_REG_VOLT_MSB      0x45
#define DIST_REG_MODULE_TYPE   0x50
#define DIST_REG_NUM_POINTS    0x51
#define DIST_REG_DIST_MIN_LSB  0x52
#define DIST_REG_DIST_MIN_MSB  0x53
#define DIST_REG_DIST_MAX_LSB  0x54
#define DIST_REG_DIST_MAX_MSB  0x55
#define DIST_REG_VOLT1_LSB     0x56
#define DIST_REG_VOLT1_MSB     0x57
#define DIST_REG_DIST1_LSB     0x58
#define DIST_REG_DIST1_MSB     0x59

byte cmdBufEnergize[] = {DIST_ADDR, DIST_REG_CMD, DIST_CMD_ENERGIZED};
int isConfigured = 0;

void DISTNxSendCommand(byte port, byte cmd, byte addr) {
  byte cmdBuf[];
  ArrayBuild(cmdBuf, addr, DIST_REG_CMD, cmd);
  I2CWrite(port, 0, cmdBuf);
  int status = I2CCheckStatus(port);
  while (status > NO_ERR)
    status = I2CCheckStatus(port);
  Stop(status < NO_ERR);
}

unsigned int DISTNxReadValue(byte port, byte reg, byte count, byte addr) {
  unsigned int result = 0;
  byte outBuf[], cmdBuf[];
  ArrayBuild(cmdBuf, addr, reg);
  if (I2CBytes(port, cmdBuf, count, outBuf)) {
    if (count == 2)
      result = outBuf[1]*256 + outBuf[0];
    else
      result = outBuf[0];
  }
  return result;
}

inline void DISTNxGP2D12(byte port, byte addr) {
	isConfigured = 1;
  DISTNxSendCommand(port, DIST_CMD_GP2D12, addr);
}

inline void DISTNxGP2D120(byte port, byte addr) {
	isConfigured = 1;
  DISTNxSendCommand(port, DIST_CMD_GP2D120, addr);
}

inline void DISTNxGP2YA21(byte port, byte addr) {
	isConfigured = 1;
  DISTNxSendCommand(port, DIST_CMD_GP2YA21, addr);
}

inline void DISTNxGP2YA02(byte port, byte addr) {
	isConfigured = 1;
  DISTNxSendCommand(port, DIST_CMD_GP2YA02, addr);
}

inline void DISTNxEnergize(byte port, byte addr) {
  DISTNxSendCommand(port, DIST_CMD_ENERGIZED, addr);
}

inline void DISTNxDeEnergize(byte port, byte addr) {
  DISTNxSendCommand(port, DIST_CMD_DEENERGIZED, addr);
}
inline unsigned int DISTNxDistance(byte port, byte addr) {
  return DISTNxReadValue(port, DIST_REG_DIST_LSB, 2, addr);
}

inline unsigned int DISTNxVoltage(byte port, byte addr) {
  return DISTNxReadValue(port, DIST_REG_VOLT_LSB, 2, addr);
}

inline unsigned int DISTNxModuleType(byte port, byte addr) {
  return DISTNxReadValue(port, DIST_REG_MODULE_TYPE, 1, addr);
}

inline unsigned int DISTNxNumPoints(byte port, byte addr) {
  return DISTNxReadValue(port, DIST_REG_NUM_POINTS, 1, addr);
}

inline unsigned int DISTNxMinDistance(byte port, byte addr) {
  return DISTNxReadValue(port, DIST_REG_DIST_MIN_LSB, 2, addr);
}

inline unsigned int DISTNxMaxDistance(byte port, byte addr) {
  return DISTNxReadValue(port, DIST_REG_DIST_MAX_LSB, 2, addr);
}


task main() {
  SetSensorLowspeed(S1);

  byte result;
  byte i2cChangeAddrMsg[3];

  i2cChangeAddrMsg[0] = DIST_ADDR;
  i2cChangeAddrMsg[1] = 0x41;
  i2cChangeAddrMsg[2] = DIST_CMD_ADPA_OFF;
  while (I2CCheckStatus(S1) == STAT_COMM_PENDING);
  result = I2CWrite(S1, 0, i2cChangeAddrMsg); // Send the message
  if (result <> NO_ERR) {
    TextOut(0, LCD_LINE3, "NA Error: ");
    NumOut(50, LCD_LINE3, result);

  }
    TextOut(0, LCD_LINE3, "Turn ADPA on 1");
  Wait(10);
  

  i2cChangeAddrMsg[0] = 0x04;
  while (I2CCheckStatus(S1) == STAT_COMM_PENDING);
  result = I2CWrite(S1, 0, i2cChangeAddrMsg); // Send the message
  if (result <> NO_ERR) {
    TextOut(0, LCD_LINE3, "NA Error: ");
    NumOut(50, LCD_LINE3, result);

  }
    TextOut(0, LCD_LINE3, "Turn ADPA on 2");
  Wait(10);
  

/* ***********************************
 * NOTE:
 * The sensor type must be configured properly for 
 * the sensor to provide meaningful readings.
 * select the correct sensor type below
 * by un-commenting appropriate line.
 * ************************************
 */
//   DISTNxGP2D120(S1, DIST_ADDR);   // short range
//   DISTNxGP2YA02(S1, DIST_ADDR);   // long range
//   DISTNxGP2YA21(S1, DIST_ADDR);   // medium range

  DISTNxEnergize(S1, DIST_ADDR);

  int count = 0;
  
  while (true) {

    ClearScreen();
		if ( isConfigured == 0 ) {
			TextOut(0, LCD_LINE1, "Sensor is not", false);
			TextOut(0, LCD_LINE2, "configured in", false);
			TextOut(0, LCD_LINE3, "this program.", false);
			TextOut(0, LCD_LINE4, "Please configure", false);
			TextOut(0, LCD_LINE5, "sensor properly.", false);
		} else {
			NumOut(0, LCD_LINE1, count, false);
			NumOut(0, LCD_LINE2, DISTNxDistance(S1, DIST_ADDR), false);
	  }
		Wait(300);
		count = count + 1;
		PlayTone(440, 20);
  }
  
  DISTNxDeEnergize(S1, DIST_ADDR);
}


